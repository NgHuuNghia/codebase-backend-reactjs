enum Category {
	COMPANY
	CITY
	DEPARTMENT
}

type Node {
	_id: ID!
	idParent: String
	name: String!
	category: Category!
	createdAt: Float!
	updatedAt: Float!
}

input NodeInput {
	name: String!
	idParent: String
	category: Category! = COMPANY
}

type TreeNodeResponse {
	_id: ID
	title: String
	subtitle: String
	expanded: Boolean
	idParent: String
	children: [TreeNodeResponse]!
}

type Query {
	nodes: [Node]!
	treeNodes: [TreeNodeResponse]!
	nodesByIDParent(_id: ID!): [Node]!
	parentNodes: [Node]!
	getNodeByCategory(category: Category!): [Node]!
}

type Mutation {
	createNode(input: NodeInput): Node
		@isAuthenticated
		@hasPermission(permission: "NODE_CREATE")
	updateNode(_id: ID!, input: NodeInput): Node
		@isAuthenticated
		@hasPermission(permission: "NODE_UPDATE")
	deleteNode(_id: ID!): Boolean
		@isAuthenticated
		@hasPermission(permission: "NODE_DELETE")
}
